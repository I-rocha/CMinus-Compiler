KEY: int
ID: x
SYMBOL: [
NUM: 10
SYMBOL: ]
SYMBOL: ;
KEY: int
ID: minloc
SYMBOL: (
KEY: int
ID: a
SYMBOL: [
SYMBOL: ]
SYMBOL: ,
KEY: int
ID: low
SYMBOL: ,
KEY: int
ID: high
SYMBOL: )
SYMBOL: {
KEY: int
ID: i
SYMBOL: ;
KEY: int
ID: x
SYMBOL: ;
KEY: int
ID: k
SYMBOL: ;
ID: i
SYMBOL: =
ID: low
SYMBOL: +
ID: i
SYMBOL: ;
KEY: While
SYMBOL: (
ID: i
SYMBOL: <
ID: high
SYMBOL: )
SYMBOL: {
KEY: if
SYMBOL: (
ID: a
SYMBOL: [
ID: i
SYMBOL: ]
SYMBOL: <
ID: x
SYMBOL: )
SYMBOL: {
ID: x
SYMBOL: =
ID: a
SYMBOL: [
ID: i
SYMBOL: ]
SYMBOL: ;
ID: k
SYMBOL: =
ID: i
SYMBOL: ;
SYMBOL: }
ID: i
SYMBOL: =
ID: i
SYMBOL: +
NUM: 1
SYMBOL: ;
SYMBOL: }
KEY: return
ID: k
SYMBOL: ;
SYMBOL: }
KEY: void
ID: sort
SYMBOL: (
KEY: int
ID: a
SYMBOL: [
SYMBOL: ]
SYMBOL: ,
KEY: int
ID: low
SYMBOL: ,
KEY: int
ID: high
SYMBOL: )
SYMBOL: {
KEY: int
ID: i
SYMBOL: ;
KEY: int
ID: k
SYMBOL: ;
ID: i
SYMBOL: =
ID: low
SYMBOL: ;
KEY: While
SYMBOL: (
ID: i
SYMBOL: <
ID: high
SYMBOL: -
NUM: 1
SYMBOL: )
SYMBOL: {
KEY: int
ID: t
SYMBOL: ;
ID: k
SYMBOL: =
ID: minloc
SYMBOL: (
ID: a
SYMBOL: ,
ID: i
SYMBOL: ,
ID: high
SYMBOL: )
SYMBOL: ;
ID: t
SYMBOL: =
ID: a
SYMBOL: [
ID: k
SYMBOL: ]
SYMBOL: ;
ID: a
SYMBOL: [
ID: k
SYMBOL: ]
SYMBOL: =
ID: a
SYMBOL: [
ID: i
SYMBOL: ]
SYMBOL: ;
ID: a
SYMBOL: [
ID: i
SYMBOL: ]
SYMBOL: =
ID: t
SYMBOL: ;
ID: i
SYMBOL: =
ID: i
SYMBOL: +
NUM: 1
SYMBOL: ;
SYMBOL: }
SYMBOL: }
KEY: void
ID: main
SYMBOL: (
KEY: void
SYMBOL: )
SYMBOL: {
KEY: int
ID: i
SYMBOL: ;
ID: i
SYMBOL: =
NUM: 0
SYMBOL: ;
KEY: While
SYMBOL: (
ID: i
SYMBOL: <
NUM: 10
SYMBOL: )
SYMBOL: {
ID: x
SYMBOL: [
ID: i
SYMBOL: ]
SYMBOL: =
ID: input
SYMBOL: (
SYMBOL: )
SYMBOL: ;
ID: i
SYMBOL: =
ID: i
SYMBOL: +
NUM: 1
SYMBOL: ;
SYMBOL: }
ID: sort
SYMBOL: (
ID: x
SYMBOL: ,
NUM: 0
SYMBOL: ,
NUM: 10
SYMBOL: )
SYMBOL: ;
ID: i
SYMBOL: =
NUM: 0
SYMBOL: ;
KEY: While
SYMBOL: (
ID: i
SYMBOL: <
NUM: 10
SYMBOL: )
SYMBOL: {
ID: output
SYMBOL: (
ID: x
SYMBOL: [
ID: i
SYMBOL: ]
SYMBOL: )
SYMBOL: ;
ID: i
SYMBOL: =
ID: i
SYMBOL: +
NUM: 1
SYMBOL: ;
SYMBOL: }
SYMBOL: }
